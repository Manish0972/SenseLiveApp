/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import java.awt.*;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author manis
 */
public  class homepage extends javax.swing.JFrame {

    /**
     * Creates new form display
     */
    public homepage() {
        initComponents();
    }

    private static SerialPort serialPort;
    private static Connection connection;
    int id;
    static int stopbit;
    static int baudrate;
    static String port;

    static String parity;

    private enum Column {
        DEVICEUID, VOLTAGE_1N, VOLTAGE_2N, VOLTAGE_3N, VOLTAGE_N, VOLTAGE_12, VOLTAGE_23, VOLTAGE_31, VOLTAGE_L, CURRENT_1,
        CURRENT_3, AVG_CURRENT, KW_1, KW_2, KW_3, KVAR_1, KVAR_2, KVAR_3, KVA_1, KVA_2, CURRENT_2, KVA_3,
        PF_1, PF_2, PF_3, PF, FREQ, KW, KVAR, KVA, MAX_KW, MIN_KW, MAX_KVAR, MIN_KVAR, MAX_KVA, MAX_INT_V1N,
        MAX_INT_V2N, MAX_INT_V3N, MAX_INT_V12, MAX_INT_V23, MAX_INT_V31, MAX_INT_I1, MAX_INT_I2, MAX_INT_I3,
        IMP_KWH, EXP_KWH, KWH, IMP_KVARH, EXP_KVARH, KVARH, KVAH, RUN_H, ON_H, THD_V1N, THD_V2N, THD_V3N, THD_V12,
        THD_V23, THD_V31, THD_I1, THD_I2, THD_I3
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        portbox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        baudratebox2 = new javax.swing.JComboBox<>();
        paritybox1 = new javax.swing.JComboBox<>();
        stopbitbox = new javax.swing.JComboBox<>();
        Button connectbtn = new Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" SenseLive - Connecting things");
        setMinimumSize(new java.awt.Dimension(1500, 800));
        setPreferredSize(new java.awt.Dimension(1500, 800));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Castellar", 1, 24)); // NOI18N
        jLabel1.setText("R-Sense device panel ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(420, 20, 380, 40);

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 320, 1170, 350);

        jLabel3.setFont(new java.awt.Font("Castellar", 1, 12)); // NOI18N
        jLabel3.setText("COMCOM : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 130, 90, 30);

        jLabel5.setFont(new java.awt.Font("Castellar", 1, 12)); // NOI18N
        jLabel5.setText("parity:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(980, 130, 70, 30);

        portbox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16", "COM17", "COM18", "COM19", "COM20", "COM21", "COM22", "COM23", "COM24", "COM25" }));
        // Set default selection to Port 7
        portbox1.setSelectedItem("Port 7");

        // Serial port initialization
         port = (String) portbox1.getSelectedItem();
        portbox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portbox1ActionPerformed(evt);
                // Update portName when the user selects a different port
                port = (String) portbox1.getSelectedItem();
            }
        });
        getContentPane().add(portbox1);
        portbox1.setBounds(120, 130, 180, 26);

        jLabel6.setFont(new java.awt.Font("Castellar", 1, 12)); // NOI18N
        jLabel6.setText("BAUDRATE :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(340, 130, 90, 30);

        jLabel7.setFont(new java.awt.Font("Castellar", 1, 12)); // NOI18N
        jLabel7.setText("stopbit:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(680, 130, 70, 30);

        baudratebox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110", "300", "600", "1200", "1800", "2400", "4800", "7200", "9600", "14400", "19200", "28800", "38400", "57600", "76800", "115200", "230400" }));
        baudratebox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baudratebox2ActionPerformed(evt);
            }
        });
        getContentPane().add(baudratebox2);
        baudratebox2.setBounds(440, 130, 180, 26);

        paritybox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "even", "odd" }));
        paritybox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paritybox1ActionPerformed(evt);
            }
        });
        getContentPane().add(paritybox1);
        paritybox1.setBounds(1050, 130, 180, 26);

        stopbitbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        stopbitbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopbitboxActionPerformed(evt);
            }
        });
        getContentPane().add(stopbitbox);
        stopbitbox.setBounds(750, 130, 180, 26);

        connectbtn.setBackground(new java.awt.Color(153, 255, 153));
        connectbtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        connectbtn.setLabel("connect");
        connectbtn.setName("connect"); // NOI18N
        connectbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectbtnActionPerformed(evt);
            }
        });
        getContentPane().add(connectbtn);
        connectbtn.setBounds(510, 220, 200, 40);

        pack();
    }// </editor-fold>

    private void portbox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
         port = (String)portbox1.getSelectedItem();

    }

    private void baudratebox2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        try {
            String selectedBaudRateStr = (String) baudratebox2.getSelectedItem();
            if (selectedBaudRateStr != null) {
                baudrate = Integer.parseInt(selectedBaudRateStr);
                // Use baudrate as needed
            } else {
                // Handle the case where selectedBaudRateStr is null
                System.err.println("Selected Baud Rate is null");
            }
        } catch (NumberFormatException e) {
            // Handle the case where selectedBaudRateStr cannot be parsed as an integer
            e.printStackTrace(); // You may want to log the exception or handle it differently
        }
    }



    private void paritybox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

         parity = (String)paritybox1.getSelectedItem();
    }

    private void stopbitboxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
         stopbit = (int)stopbitbox.getSelectedItem();
    }
    private void connectbtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        meterread();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

            try{

                serialPort = new SerialPort(port);
                // Close the serial port when done
                try {
                    if (serialPort != null && serialPort.isOpened()) {
                        serialPort.closePort();
                        System.out.println("Serial port closed.");
                    }
                } catch (SerialPortException e) {
                    e.printStackTrace();
                }

                serialPort.openPort();

                serialPort.setParams(baudrate, SerialPort.DATABITS_8, stopbit, Integer.parseInt(parity));
                System.out.println("port="+ port);

                // Database connection details
                String url = "jdbc:mysql://localhost:3306/energydb";
                String username = "root";
                String password = "0000";
                connection = DriverManager.getConnection(url, username, password);
            }catch(Exception e) {
        }


        // Serial port initialization
//         port = (String)portbox1.getSelectedItem();


        //=======================================================================================================
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homepage().setVisible(true);
            }
        });
    }

    private void meterread(){
        try {

            // Inside the main class
            StringBuilder serialDataBuffer = new StringBuilder();

            serialPort.addEventListener(new SerialPortEventListener() {
                @Override
                public void serialEvent(SerialPortEvent serialPortEvent) {
                    if (serialPortEvent.isRXCHAR() && serialPortEvent.getEventValue() > 0) {
                        try {
                            String data = serialPort.readString(serialPortEvent.getEventValue());
                            serialDataBuffer.append(data);
                            System.out.println("Received data: " + data);
                            // Append the new data to the existing text in jTextPane1
                            SwingUtilities.invokeLater(() -> {
                                Document doc = jTextPane1.getDocument();
                                try {
                                    doc.insertString(doc.getLength(), data, null);
                                } catch (BadLocationException e) {
                                    e.printStackTrace();
                                }
                            });

//                            insertIntoDatabase(processReading(serialDataBuffer.toString()));



                            // Check if the received data contains the delimiter
                            if (serialDataBuffer.toString().contains("---")) {
                                // Process data and insert into the database
                                insertIntoDatabase(processReading(serialDataBuffer.toString()));

                                // Clear the buffer after processing the data
                                serialDataBuffer.setLength(0);
                            }
                        } catch (SerialPortException |  NumberFormatException e) {
                            e.printStackTrace();
                        }
                    }

                }
            });

        } catch (SerialPortException e) {
            e.printStackTrace();
        }
    }


    private static Map<homepage.Column, String> processReading(String data) {
        Map<homepage.Column, String> readings = new HashMap<>();

        String[] lines = data.split("\n");
        for (String line : lines) {
            line = line.trim();

            if (!line.isEmpty() && line.contains(":")) {
                String[] parts = line.split(":", 2); // Limit the split to 2 parts
                if (parts.length == 2) {
                    String key = parts[0].trim().toUpperCase().replace("-", "_"); // Adjust key format
                    String value = parts[1].trim();

                    try {
                        homepage.Column enumKey = homepage.Column.valueOf(key);
                        readings.put(enumKey, value);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Invalid column name: " + key);
                    }
                } else {
                    System.err.println("Invalid reading format: " + line);
                    System.err.println("Unexpected data: " + line);

                }
            } else {
                System.err.println("Invalid reading format: " + line);
            }
        }

        return readings;
    }

    private static void insertIntoDatabase(Map<homepage.Column, String> readings) {

        int ID = 0;
        String sql = "INSERT INTO energydb.energyreading " +
                "(ID, DEVICEUID, VOLTAGE_1N, VOLTAGE_2N, VOLTAGE_3N, VOLTAGE_N, VOLTAGE_12, VOLTAGE_23, VOLTAGE_31, VOLTAGE_L, " +
                "CURRENT_1, CURRENT_3, AVG_CURRENT, KW_1, KW_2, KW_3, KVAR_1, KVAR_2, KVAR_3, KVA_1, KVA_2, CURRENT_2, KVA_3, " +
                "PF_1, PF_2, PF_3, PF, FREQ, KW, KVAR, KVA, MAX_KW, MIN_KW, MAX_KVAR, MIN_KVAR, MAX_KVA, MAX_INT_V1N, " +
                "MAX_INT_V2N, MAX_INT_V3N, MAX_INT_V12, MAX_INT_V23, MAX_INT_V31, MAX_INT_I1, MAX_INT_I2, MAX_INT_I3, " +
                "IMP_KWH, EXP_KWH, KWH, IMP_KVARH, EXP_KVARH, KVARH, KVAH, RUN_H, ON_H, THD_V1N, THD_V2N, THD_V3N, THD_V12, " +
                "THD_V23, THD_V31, THD_I1, THD_I2, THD_I3) " +
                "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";


        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Set parameters for the prepared statement
            preparedStatement.setInt(1, ID);
            preparedStatement.setString(2, readings.get(homepage.Column.DEVICEUID) != null ? readings.get(homepage.Column.DEVICEUID).toString() : null);
            preparedStatement.setString(3, readings.get(homepage.Column.VOLTAGE_1N));
            preparedStatement.setString(4, readings.get(homepage.Column.VOLTAGE_2N));
            preparedStatement.setString(5, readings.get(homepage.Column.VOLTAGE_3N));
            preparedStatement.setString(6, readings.get(homepage.Column.VOLTAGE_N));
            preparedStatement.setString(7, readings.get(homepage.Column.VOLTAGE_12));
            preparedStatement.setString(8, readings.get(homepage.Column.VOLTAGE_23));
            preparedStatement.setString(9, readings.get(homepage.Column.VOLTAGE_31));
            preparedStatement.setString(10, readings.get(homepage.Column.VOLTAGE_L));
            preparedStatement.setString(11, readings.get(homepage.Column.CURRENT_1));
            preparedStatement.setString(12, readings.get(homepage.Column.CURRENT_3));
            preparedStatement.setString(13, readings.get(homepage.Column.AVG_CURRENT));
            preparedStatement.setString(14, readings.get(homepage.Column.KW_1));
            preparedStatement.setString(15, readings.get(homepage.Column.KW_2));
            preparedStatement.setString(16, readings.get(homepage.Column.KW_3));
            preparedStatement.setString(17, readings.get(homepage.Column.KVAR_1));
            preparedStatement.setString(18, readings.get(homepage.Column.KVAR_2));
            preparedStatement.setString(19, readings.get(homepage.Column.KVAR_3));
            preparedStatement.setString(20, readings.get(homepage.Column.KVA_1));
            preparedStatement.setString(21, readings.get(homepage.Column.KVA_2));
            preparedStatement.setString(22, readings.get(homepage.Column.KVA_3));
            preparedStatement.setString(23, readings.get(homepage.Column.CURRENT_2));
            preparedStatement.setString(24, readings.get(homepage.Column.PF_1));
            preparedStatement.setString(25, readings.get(homepage.Column.PF_2));
            preparedStatement.setString(26, readings.get(homepage.Column.PF_3));
            preparedStatement.setString(27, readings.get(homepage.Column.PF));
            preparedStatement.setString(28, readings.get(homepage.Column.FREQ));
            preparedStatement.setString(29, readings.get(homepage.Column.KW));
            preparedStatement.setString(30, readings.get(homepage.Column.KVAR));
            preparedStatement.setString(31, readings.get(homepage.Column.KVA));
            preparedStatement.setString(32, readings.get(homepage.Column.MAX_KW));
            preparedStatement.setString(33, readings.get(homepage.Column.MIN_KW));
            preparedStatement.setString(34, readings.get(homepage.Column.MAX_KVAR));
            preparedStatement.setString(35, readings.get(homepage.Column.MIN_KVAR));
            preparedStatement.setString(36, readings.get(homepage.Column.MAX_KVA));
            preparedStatement.setString(37, readings.get(homepage.Column.MAX_INT_V1N));
            preparedStatement.setString(38, readings.get(homepage.Column.MAX_INT_V2N));
            preparedStatement.setString(39, readings.get(homepage.Column.MAX_INT_V3N));
            preparedStatement.setString(40, readings.get(homepage.Column.MAX_INT_V12));
            preparedStatement.setString(41, readings.get(homepage.Column.MAX_INT_V23));
            preparedStatement.setString(42, readings.get(homepage.Column.MAX_INT_V31));
            preparedStatement.setString(43, readings.get(homepage.Column.MAX_INT_I1));
            preparedStatement.setString(44, readings.get(homepage.Column.MAX_INT_I2));
            preparedStatement.setString(45, readings.get(homepage.Column.MAX_INT_I3));
            preparedStatement.setString(46, readings.get(homepage.Column.IMP_KWH));
            preparedStatement.setString(47, readings.get(homepage.Column.EXP_KWH));
            preparedStatement.setString(48, readings.get(homepage.Column.KWH));
            preparedStatement.setString(49, readings.get(homepage.Column.IMP_KVARH));
            preparedStatement.setString(50, readings.get(homepage.Column.EXP_KVARH));
            preparedStatement.setString(51, readings.get(homepage.Column.KVARH));
            preparedStatement.setString(52, readings.get(homepage.Column.KVAH));
            preparedStatement.setString(53, readings.get(homepage.Column.RUN_H));
            preparedStatement.setString(54, readings.get(homepage.Column.ON_H));
            preparedStatement.setString(55, readings.get(homepage.Column.THD_V1N));
            preparedStatement.setString(56, readings.get(homepage.Column.THD_V2N));
            preparedStatement.setString(57, readings.get(homepage.Column.THD_V3N));
            preparedStatement.setString(58, readings.get(homepage.Column.THD_V12));
            preparedStatement.setString(59, readings.get(homepage.Column.THD_V23));
            preparedStatement.setString(60, readings.get(homepage.Column.THD_V31));
            preparedStatement.setString(61, readings.get(homepage.Column.THD_I1));
            preparedStatement.setString(62, readings.get(homepage.Column.THD_I2));
            preparedStatement.setString(63, readings.get(homepage.Column.THD_I3));

            // Execute the SQL update
            preparedStatement.executeUpdate();

            // Execute the SQL update
            int rowsAffected = preparedStatement.executeUpdate();

//            // Commit the changes
//            connection.commit();
            // Add a delay thread for 1 minute
            // Start a separate thread for the 1-minute delay
            Thread delayThread = new Thread(() -> {
                try {
                    Thread.sleep(60000); // 1 minute delay
//                    serialPort.closePort(); // Close the serial port after the delay
                    System.out.println("1 minute delay completed. Serial port closed.");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            delayThread.start();

            // Retrieve the generated keys, if needed
            try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int generatedId = generatedKeys.getInt(1);
                    // Do something with the generated ID, if needed
                }
            }

            System.out.println(rowsAffected + " row(s) affected.");
        } catch (SQLException e) {
            e.printStackTrace();

        }

    }




    // Variables declaration - do not modify
    private javax.swing.JComboBox<String> baudratebox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JComboBox<String> paritybox1;
    private static javax.swing.JComboBox<String> portbox1;
    private javax.swing.JComboBox<String> stopbitbox;
    // End of variables declaration
}
